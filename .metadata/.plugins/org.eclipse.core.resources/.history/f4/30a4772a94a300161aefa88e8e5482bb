
public class Computer {
	int Board[][];
	final int length=6;
	final int wide= 7;
	final int cpu=2;
	final int player=1;
	int posx [];
	final int depth =20;
	
	public Computer(){
		Board= new int [length][wide];
		posx=new int[7];
	
	}
	
	public int game_finished(int Board[][]){
		int auxP=0;
		int auxC=0;
		for (int i=length-1; i>=0;i--){
			for(int j=wide-1;j>=0;j--){
			if(Board[i][j]==1){
				auxP++;
				auxC=0;
			}else if (Board[i][j]==2){
				auxC++;
				auxP=0;
			}else{
				auxC=0;
				auxP=0;
			}
			if(auxC==4){
				return cpu;
			}
			if(auxP==4){
				return player;
			}
			}
		}
		for(int j=wide-1;j>=0;j--){
			for (int i=length-1; i>=0;i--){
				if(Board[i][j]==1){
					auxP++;
					auxC=0;
				}else if (Board[i][j]==2){
					auxC++;
					auxP=0;
				}else{
					auxC=0;
					auxP=0;
				}
				if(auxC==4){
					return cpu;
				}
				if(auxP==4){
					return player;
				}
				}
				
			}	
		return 0;
	}

	

	public  int poner (int Board[][],int x){
		return compute(Board,1);
	}
	
	
	public int compute(int Board[][],int depth){
		if(Board==null){
			return 0;
		}
		if(this.game_finished(Board)==1){
			return ((int)(-1* (Math.abs(depth-this.depth)) )  );
		}
		if(this.game_finished(Board)==2){
			return (int)((Math.abs(depth-this.depth)) );
		}
		if(depth==this.depth){
			if(this.game_finished(Board)==0){
				return 0;
			}	
		}
		else{
			depth+=1;
			return biggest(compute(insertBoard(Board,0,depth),depth), compute(insertBoard(Board,1,depth),depth),	
					compute(insertBoard(Board,2,depth),depth),compute(insertBoard(Board,3,depth),depth),
					compute(insertBoard(Board,4,depth),depth), 	compute(insertBoard(Board,5,depth),depth),
					compute(insertBoard(Board,6,depth),depth));
		}
		return 0;	
	}
	public int biggest(int a, int b, int c , int d, int e, int f ,int g ){
		
		return Math.max(a, Math.max(b, Math.max(c, Math.max(d, Math.max(e, Math.max(f, g))))));
	}
	
	
	
	public int[][] insertBoard(int Board[][],int pos,int depth){
		if(Board[0][pos]==0){
			if(this.play_player(pos)){
				if(depth%2==0){
				Board[this.getPosx(pos)][pos]=1;
				setPosx(pos);
				}else{
					Board[this.getPosx(pos)][pos]=2;
					setPosx(pos);
				}			
				
			}
			
			
		}else{
		  Board=null;
		}
		
		
		return Board;
	}
	
	
	public boolean play_player(int x){
		if(x<wide && x>=0){
			if(this.getPosx(x)>-1){
				
				return true;
			}
			return false;
		}
		return false;
		
	}
	public int getPosx(int i){
		return posx[i];
	}
	public void setPosx(int i){
		posx[i]-=1;
	}
	
}





